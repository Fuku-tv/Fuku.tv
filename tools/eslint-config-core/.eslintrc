{
  "root": true,
  "env": {
    "browser": true,
    "node": true,
    "jest": true
  },
  "extends": ["airbnb", "airbnb/hooks", "plugin:react/recommended", "plugin:@typescript-eslint/recommended", "prettier"],
  "parser": "@typescript-eslint/parser",
  "parserOptions": {
    "ecmaFeatures": {
      "jsx": true
    },
    "ecmaVersion": "latest",
    "sourceType": "module"
  },
  "rules": {
    "no-shadow": "off",
    "@typescript-eslint/no-shadow": ["error"],

    // ensure typed imports are used via 'import type {Type} from 'package''
    "@typescript-eslint/consistent-type-imports": "error",

    // allow calls to console.log
    "no-console": "off",

    // opinion rule, no need to restrict syntax that works
    "no-restricted-syntax": "off",

    // typescript already checks for undefined/unsed vars
    "no-undef": "off",
    "no-unused-vars": "off",
    "@typescript-eslint/no-unused-vars": "warn",

    //quick fix for https://stackoverflow.com/questions/63818415/react-was-used-before-it-was-defined
    "no-use-before-define": "off",

    // you dont import extensions
    "import/extensions": "off",

    // typescript already handles path resolution
    "import/no-unresolved": "off",

    //disallow unassigned imports
    "import/no-unassigned-import": "error",

    // not needed, we do not publish packages to NPM.
    "import/no-extraneous-dependencies": "off",

    // disabled, all types auto-fix to interface. rule would be redundant.
    "@typescript-eslint/interface-name-prefix": "off",

    // established coding standards in different packages use a different naming convention
    "@typescript-eslint/camelcase": "off",

    // allow empty arrow functions for useEffect hooks
    "@typescript-eslint/no-empty-function": ["error", { "allow": ["arrowFunctions"] }],

    // redundant with Typescript
    "react/jsx-no-undef": "off",

    // not using defaultProps with typescript/function components
    "react/require-default-props": [0],

    // permit JSX syntax in tsx files
    "react/jsx-filename-extension": ["error", { "extensions": ["tsx"] }],

    // destructuring props is not required, this can malform redux state updates
    "react/destructuring-assignment": "off",

    // Props validation is handled by Typescript compiler
    "react/prop-types": "off"
  }
}
